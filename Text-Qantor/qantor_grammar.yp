# qantor_grammar.yp
# 
# Grammar for Qantor
%left TEXT
%left MACRO_START
%%

input: raw_para { $_[1] }
    ;

text: raw_para
    | text empty_line raw_para {
        my $l = $_[1];
        $l->append($_[3]);
        $l
        }
        ;

raw_para: para_text_wrapper
    | raw_para para_text_wrapper {
        my ($self, $l, $other) = @_; $l->append($other); return $l;
    }
    ;

single_empty_line: EMPTY_LINE 
    ;

empty_line: single_empty_line
    | empty_line single_empty_line
    ;

para_text_wrapper: para_text { 
        my $p = Text::Qantor::Parser::Elem::Para->new(
                    { body => $_[1] },
                    );
                return Text::Qantor::Parser::Elem::ParaList->new(
                { para => $p,},
                ) 
                }
         ;

para_text: macro_para_text 
         | plain_para_text
         ;

macro_para_text: MACRO_START MACRO_NAME MACRO_BODY_START para_text MACRO_BODY_END { Text::Qantor::Parser::Elem::MacroCall->new({ name => $_[2]->[0], body => $_[4]->[0] }) } 
    ;
    
macro_ident: MACRO_NAME # TODO - create a better regex for it than just 
                   # alphanumeric chars.
    ;

plain_para_text: TEXT
    | plain_para_text TEXT { my $t1 = $_[1] ; my $t2 = $_[2] ; [$t1->[0].$t2->[0], $t1->[1]] }
    ;

%%

use Text::Qantor::Parser::Elem::Para;
use Text::Qantor::Parser::Elem::ParaList;
use Text::Qantor::Parser::Elem::MacroCall;

=head1 NAME 

Text::Qantor::Parser - parser for Qantor (auto-generated).

=head1 DESCRIPTION

Foo fay foo.

=head1 FUNCTIONS

=head2 Text::Qantor::Parser->new()

For internal use.

=cut

