# qantor_grammar.yp
# 
# Grammar for Qantor
%left EOF TEXT
%%

input: text EOF { $_[1] }
    ;

text: raw_para
    | text empty_line raw_para {
        my $l = $_[1];
        $l->append($_[3]);
        $l
        }
        ;

raw_para: para_text {
        my $p = Text::Qantor::Parser::Elem::Para->new(
                    { body => $_[1]->[0] },
                    );
                return Text::Qantor::Parser::Elem::ParaList->new(
                { para => $p,},
                )  } 
    ;

single_empty_line: EMPTY_LINE { print "\nTheMappaOo\n";}
    ;

empty_line: single_empty_line { print "\nFOO1\n"}
    | empty_line single_empty_line  { print "\nFOO2\n"}
    ;

para_text: plain_para_text
      #| macro_para_text
    ;

macro_start: MACRO_START 
    ;

macro_para_text : macro_start macro_ident MACRO_BODY_START para_text MACRO_BODY_END { Text::Qantor::Parser::Elem::MacroCall->new({ name => $_[2], body => $_[4] }) } 
    ;
    
macro_ident: MACRO_NAME # TODO - create a better regex for it than just 
                   # alphanumeric chars.
    ;

plain_para_text: TEXT
    | plain_para_text TEXT { my $t1 = $_[1] ; my $t2 = $_[2] ; [$t1->[0].$t2->[0], $t1->[1]] }
    ;

%%

use Text::Qantor::Parser::Elem::Para;
use Text::Qantor::Parser::Elem::ParaList;
use Text::Qantor::Parser::Elem::MacroCall;


